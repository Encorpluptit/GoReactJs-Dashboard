version: '3.3'
services:
  server:
    container_name: Dashboard-Server
    build:
      context: backend/
      dockerfile: Dockerfile
    environment:
      PORT: 8080
      API_STATE: RELEASE
      GIN_MODE: debug
      FRONT_URL: http://localhost:3000
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_HOST}
      DB_PASSWORD: ${DB_PASSWORD}
      DATABASE_URL: ${DATABASE_URL}
    ports:
      - 8080:6666
    restart: on-failure
    volumes:
      - api:/api
      - sqlite:/database
#    depends_on:
#      - fullstack-postgres
    networks:
      - dashboard-network

  front:
    container_name: Dashboard-Front
    build:
      context: front/
      dockerfile: Dockerfile.prod
    depends_on:
      - server
    volumes:
      - app:/app
      - app_node_modules:/app/node_modules
    ports:
      - 3000:80
    environment:
      - CHOKIDAR_USEPOLLING=true
      - API_URL=${API_URL}
    networks:
      - dashboard-network


#  fullstack-postgres:
#    image: postgres:latest
#    container_name: full_db_postgres
#    environment:
#      - POSTGRES_USER=${DB_USER}
#      - POSTGRES_PASSWORD=${DB_PASSWORD}
#      - POSTGRES_DB=${DB_NAME}
#      - DATABASE_HOST=${DB_HOST}
#    ports:
#      - '5432:5432'
#    volumes:
#      - database_postgres:/var/lib/postgresql/data
#    networks:
#      - fullstack
#
#  pgadmin:
#    image: dpage/pgadmin4
#    container_name: pgadmin_container
#    environment:
#      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
#      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
#    depends_on:
#      - fullstack-postgres
#    ports:
#      - "5050:80"
#    networks:
#      - fullstack
#    restart: unless-stopped
#

volumes:
  api:
  sqlite:
  app:
  app_node_modules:

# Networks to be created to facilitate communication between containers
networks:
  dashboard-network:
    driver: bridge
